@{
    ViewData["Title"] = "Razor";
}

<div class="page-title">
    <img src="/img/asp.net.jpg" alt="ASP logo" />
    <h1 class="display-4">Синтаксис Razor.</h1>
</div>

<p>
    Синтаксис Razor використовується для розширення можливостей HTML
</p>
<ul>
    <li>використання змінних та виразів</li>
    <li>умовні блоки (умовна верстка)</li>
    <li>циклічна верстка</li>
</ul>

<p>
    Основу складає символ <code>&commat;</code>,
    що обмежує використання цього символу у HTML,
    замість нього вживається сутність <code>&amp;commat;</code>
</p>
<h3>Вирази</h3>
<p>
    Результати виразів відображаються інструкцією
    <code>&commat;(2 + 2) = @(2 + 2)</code>
</p>
<h3>Інструкції</h3>
<p>
    Інструкції - конструкції, що не мають результату. Вони оформлюються у
    фігурних дужках на кшталт:<br />
    <code>&commat;{ String str = "Hello, World"; }</code>
    @{
        String str = "Hello, World";
    }
</p>
<p>
    Змінні "видні" у всьому файлі-представленні, зокрема в іншому параграфі <br />
    &commat;str = @str<br />
    Круглі дужки не є обов'язковими, вони потрібні тоді, коли межі виразу
    неоднозначні<br />
    &commat;str + "!" = @str + "!" <br />
    &commat;(str + "!") = @(str + "!") <br />
    &commat;str.Length + 1 = @str.Length + 1<br />
    &commat;str[1] = @str[1]<br />
    Винятки - Email адреси: user@ukr.net
</p>
<h3>Умова та циклічна верстка</h3>
@{
    String[] arr = ["Дані 1", "Дані 2", "Дані 3", "Дані 4", "Дані 5"];
}
<p>
    Razor дозволяє комбінувати код та розмітку, причому сам намагається
    визначити де є що.
</p>
@for (int i = 0; i < arr.Length; i += 1)
{
    int n = i + 1;
    <b>arr[@n] = @arr[i]</b>
}
<p>
    Довжина масиву - число
    @if (arr.Length % 2 == 0)
    {
        <span>парне</span>
    }
    else
    {
        <span>непарне</span>
    }
</p>